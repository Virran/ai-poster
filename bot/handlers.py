from aiogram import Router, F
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from datetime import datetime, timedelta
import uuid
import os

from bot.states import Form
from db import async_session
from models import User
from yookassa import Payment
from yookassa.configuration import Configuration

Configuration.account_id = int(os.getenv("YOOKASSA_SHOP_ID"))
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")

router = Router()

# /start
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä.\n"
        "–Ø –±—É–¥—É:\n"
        "‚Ä¢ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É –í–ö,\n"
        "‚Ä¢ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã,\n"
        "‚Ä¢ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üëá"
    )
    payment_id, url = create_payment(990, "–ü–æ–¥–ø–∏—Å–∫–∞ AI-–ø–æ—Å—Ç–µ—Ä", message.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 990 ‚ÇΩ", url=url)],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{payment_id}")]
    ])
    await message.answer(text, reply_markup=kb)

def create_payment(amount: int, description: str, tg_id: int):
    payment = Payment.create({
        "amount": {"value": f"{amount}.00", "currency": "RUB"},
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/ii_poster_bot?start=pay_{tg_id}"
        },
        "capture": True,
        "description": description,
        "metadata": {"tg_id": str(tg_id)}
    })
    return payment.id, payment.confirmation.confirmation_url

# Check Payment
@router.callback_query(F.data.startswith("check_"))
async def check_payment(callback: CallbackQuery):
    payment_id = callback.data.split("_", 1)[1]
    payment = Payment.find_one(payment_id)

    if payment.status == "succeeded":
        await callback.message.edit_text(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∫–ª—é—á API –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –í–ö:"
        )
    else:
        await callback.answer(
            "‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–µ.",
            show_alert=True,
        )

@router.message(Form.waiting_access_token)
async def receive_access_token(message: Message, state: FSMContext):
    access_token = message.text
    await state.update_data(access_token=access_token)
    await message.answer("–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∫–ª—é—á API –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –í–ö:")

@router.message(Form.waiting_vk)
async def receive_vk(message: Message, state: FSMContext):
    await state.update_data(vk_url=message.text)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–µ–ª–æ–≤–æ–π", callback_data="style_–¥–µ–ª–æ–≤–æ–π")],
            [InlineKeyboardButton(text="–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", callback_data="style_—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π")],
            [InlineKeyboardButton(text="–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", callback_data="style_–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π")],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ—Å—Ç–æ–≤:", reply_markup=kb)
    await state.set_state(Form.waiting_style)

@router.callback_query(F.data.startswith("style_"))
async def receive_style(callback: CallbackQuery, state: FSMContext):
    style = callback.data.split("_", 1)[1]
    await state.update_data(style=style)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –ø–æ—Å—Ç/–¥–µ–Ω—å", callback_data="freq_1")],
        [InlineKeyboardButton(text="2 –ø–æ—Å—Ç–∞/–¥–µ–Ω—å", callback_data="freq_2")],
        [InlineKeyboardButton(text="3 –ø–æ—Å—Ç–∞/–¥–µ–Ω—å", callback_data="freq_3")],
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å:", reply_markup=kb)
    await state.set_state(Form.waiting_freq)

@router.callback_query(F.data.startswith("freq_"))
async def receive_freq(callback: CallbackQuery, state: FSMContext):
    freq = float(callback.data.split("_", 1)[1])
    await state.update_data(posts_per_day=freq)
    await state.set_state(Form.waiting_keywords)

@router.message(Form.waiting_keywords)
async def receive_keywords(message: Message, state: FSMContext):
    keywords = message.text.split()
    post_text = await generate_post(keywords)
    group_id = state.data["vk_url"].split("/")[-2]  # –ò–∑–≤–ª–µ–∫–∞ "vk.com/-12345678" ‚Üí 12345678
    access_token = state.data["access_token"]
    
    post_result = post_to_vk(group_id, access_token, post_text)
    if post_result.get("response"):
        await message.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç.")
    await state.finish()

async def generate_post(keywords: list) -> str:
    post_text = " ".join(keywords)
    return post_text[:300]  # –£–±–µ–¥–∏, —á—Ç–æ –ø–æ—Å—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ—Å—Ç–≤—É–µ—Ç 300 —Å–∏–º–≤–æ–ª–æ–≤

def post_to_vk(group_id: int, access_token: str, post_text: str):
    url = "https://api.vk.com/method/wall.post"
    params = {
        "access_token": access_token,
        "v": 5.101,
        "owner_id": group_id,
        "message": f"–¢–µ—Å—Ç –±–æ—Ç–∞ {post_text} | {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} | {os.getenv('VK_USER_NAME')}"
    }
    response = requests.post(url, params=params)
    return response.json()