import os
import uuid
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext

from bot.states import Form
from db import async_session
from models import User
from yookassa import Payment
from yookassa.configuration import Configuration
from yookassa.domain.models.currency import Currency

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa ---
Configuration.account_id = int(os.getenv("YOOKASSA_SHOP_ID"))
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")

router = Router()


# ---------- 1. –°—Ç–∞—Ä—Ç ----------
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä.\n\n"
        "–Ø –±—É–¥—É:\n"
        "‚Ä¢ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É –í–ö,\n"
        "‚Ä¢ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã,\n"
        "‚Ä¢ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üëá"
    )
    payment_id, url = create_payment(990, "–ü–æ–¥–ø–∏—Å–∫–∞ AI-–ø–æ—Å—Ç–µ—Ä 30 –¥–Ω–µ–π", message.from_user.id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 990 ‚ÇΩ", url=url)]]
    )
    await message.answer(text, reply_markup=kb)


# ---------- 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ ----------
def create_payment(amount: int, description: str, tg_id: int):
    payment = Payment.create(
        {
            "amount": {"value": f"{amount}.00", "currency": Currency.RUB},
            "confirmation": {
                "type": "redirect",
                # –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω—ë–º—Å—è –≤ —á–∞—Ç
                "return_url": f"https://t.me/ii_poster_bot?start=pay_{tg_id}",
            },
            "capture": True,
            "description": description,
        },
        uuid.uuid4(),
    )
    return payment.id, payment.confirmation.confirmation_url


# ---------- 3. –í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ----------
@router.message(F.text.startswith("/start pay_"))
async def after_payment(message: Message):
    # payment_id –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ user_id
    async with async_session() as s:
        u = await s.get(User, message.from_user.id)
        if u and u.is_active:
            await message.answer(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞! –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É –≥—Ä—É–ø–ø—É –í–ö:"
            )
            await Form.waiting_vk.set()
            return

        # –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç—ë–∂ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ª—É—á—à–µ –Ω–µ –¥–µ—Ä–∂–∞—Ç—å –ª–∏—à–Ω–∏–π –∫–æ–¥)
        await message.answer(
            "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç—ë–∂‚Ä¶"
        )
        # –ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã —Å—Ç–∞—Ç—É—Å = succeeded
        # –î–ª—è MVP –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞
        u = User(
            tg_id=message.from_user.id,
            expires_at=datetime.utcnow() + timedelta(days=30),
            is_active=True,
        )
        s.add(u)
        await s.commit()

    await message.answer(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É –≥—Ä—É–ø–ø—É –í–ö:"
    )
    await Form.waiting_vk.set()


# ---------- 4. –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É ----------
@router.message(Form.waiting_vk)
async def receive_vk(message: Message, state: FSMContext):
    await state.update_data(vk_url=message.text)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–µ–ª–æ–≤–æ–π", callback_data="style_–¥–µ–ª–æ–≤–æ–π")],
            [InlineKeyboardButton(text="–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", callback_data="style_—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π")],
            [InlineKeyboardButton(text="–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", callback_data="style_–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π")],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ—Å—Ç–æ–≤:", reply_markup=kb)
    await state.set_state(Form.waiting_style)


# ---------- 5. –í—ã–±–æ—Ä —Å—Ç–∏–ª—è ----------
@router.callback_query(F.data.startswith("style_"))
async def receive_style(callback: CallbackQuery, state: FSMContext):
    style = callback.data.split("_", 1)[1]
    await state.update_data(style=style)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 –ø–æ—Å—Ç/–¥–µ–Ω—å", callback_data="freq_1")],
            [InlineKeyboardButton(text="2 –ø–æ—Å—Ç–∞/–¥–µ–Ω—å", callback_data="freq_2")],
            [InlineKeyboardButton(text="3 –ø–æ—Å—Ç–∞/–¥–µ–Ω—å", callback_data="freq_3")],
        ]
    )
    await callback.message.edit_text("–°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å?", reply_markup=kb)
    await state.set_state(Form.waiting_freq)


# ---------- 6. –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã ----------
@router.callback_query(F.data.startswith("freq_"))
async def receive_freq(callback: CallbackQuery, state: FSMContext):
    freq = float(callback.data.split("_", 1)[1])
    data = await state.get_data()

    async with async_session() as s:
        u = await s.get(User, callback.from_user.id)
        u.vk_group_id = data["vk_url"]
        u.theme = data["theme"]
        u.style = data["style"]
        u.posts_per_day = freq
        await s.commit()

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º 30 –¥–Ω–µ–π –ø–æ—Å—Ç–æ–≤
        from bot.utils import generate_all_posts
        await generate_all_posts(u.id, u.theme, u.style, u.posts_per_day)

    await callback.message.edit_text(
        "‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –ü–æ—Å—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )