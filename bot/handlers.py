from aiogram import Router, Bot, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import os
import requests
from yookassa import Payment
from yookassa.configuration import Configuration

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω VK API –¥–ª—è —Ç–µ—Å—Ç–∞
VK_API_TOKEN = "vk1.a.cByhC3scVxdfbznjG1qJ_0xXfVJ8ckIMNqjxvzBNcHO3LVqnduPMDqGsWzT9oHgi_m2b7AEdI9JTmvfVOVJmatYqyApRGsECGjtta0iIfxEDwNpD3_dg8IAmyINlVxFwQgsDU2ozVv0wcNvCIZ76-4qiiOJgzHBy0daVSn-PhX8GSiDGbL7vQcCXVRa81PeAk2xs252zelQBALYBCWAtFw"

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –≥—Ä—É–ø–ø—ã VK –¥–ª—è —Ç–µ—Å—Ç–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å -)
VK_GROUP_ID = "-231921005"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

Configuration.account_id = int(os.getenv("YOOKASSA_SHOP_ID"))
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")

router = Router()

# /start
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ VK.\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è —Å–¥–µ–ª–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É."
    )
    payment_id, url = create_payment(1, "–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞", message.from_user.id)  # –°—É–º–º–∞ 1 —Ä—É–±–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1 ‚ÇΩ (—Ç–µ—Å—Ç)", url=url)],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{payment_id}")]
    ])
    await message.answer(text, reply_markup=kb)

def create_payment(amount: int, description: str, tg_id: int):
    payment = Payment.create({
        "amount": {"value": f"{amount}.00", "currency": "RUB"},
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/ii_poster_bot?start=pay_{tg_id}"
        },
        "capture": True,
        "description": description,
        "metadata": {"tg_id": str(tg_id)}
    })
    return payment.id, payment.confirmation.confirmation_url

# Check Payment
@router.callback_query(F.data.startswith("check_"))
async def check_payment(callback: CallbackQuery):
    payment_id = callback.data.split("_", 1)[1]
    payment = Payment.find_one(payment_id)

    if payment.status == "succeeded":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        post_text = f"–¢–µ—Å—Ç –±–æ—Ç–∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | ID: {callback.from_user.id}"
        
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç –≤ VK
        post_result = post_to_vk(VK_GROUP_ID, VK_API_TOKEN, post_text)
        
        if post_result.get("response"):
            await callback.message.edit_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:\n"
                f"–¢–µ–∫—Å—Ç: {post_text}\n"
                f"–ì—Ä—É–ø–ø–∞: vk.com/public{VK_GROUP_ID[1:]}"
            )
        else:
            error_msg = post_result.get("error", {}).get("error_msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await callback.message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:\n{error_msg}"
            )
    else:
        await callback.answer(
            "‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True,
        )

def post_to_vk(group_id: str, access_token: str, post_text: str):
    url = "https://api.vk.com/method/wall.post"
    params = {
        "access_token": access_token,
        "v": "5.131",
        "owner_id": group_id,
        "message": post_text,
        "from_group": 1
    }
    try:
        response = requests.post(url, params=params)
        return response.json()
    except Exception as e:
        return {"error": {"error_msg": str(e)}}