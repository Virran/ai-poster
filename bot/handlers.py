import os
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.context import FSMContext

from bot.states import Form
from db import async_session
from models import User
from payments import create_payment
from yookassa import Payment  # pip install yookassa

router = Router()

# ---------- 1. /start ----------
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä.\n\n"
        "–Ø –±—É–¥—É:\n"
        "‚Ä¢ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É –í–ö,\n"
        "‚Ä¢ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã,\n"
        "‚Ä¢ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üëá"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É 990 ‚ÇΩ", callback_data="buy")]
        ]
    )
    await message.answer(text, reply_markup=kb)


# ---------- 2. –ö–Ω–æ–ø–∫–∞ ¬´–ö—É–ø–∏—Ç—å¬ª ----------
@router.callback_query(F.data == "buy")
async def buy(callback: CallbackQuery):
    payment_id, url = create_payment(990, "–ü–æ–¥–ø–∏—Å–∫–∞ AI-–ø–æ—Å—Ç–µ—Ä")
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)],
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{payment_id}"
                )
            ],
        ]
    )
    await callback.message.edit_text(
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üëá", reply_markup=kb
    )


# ---------- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã ----------
@router.callback_query(F.data.startswith("check_"))
async def check_payment(callback: CallbackQuery, state: FSMContext):
    payment_id = callback.data.split("_", 1)[1]
    payment = Payment.find_one(payment_id)

    if payment.status == "succeeded":
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session() as s:
            u = User(
                tg_id=callback.from_user.id,
                expires_at=datetime.utcnow() + timedelta(days=30),
                is_active=True,
            )
            s.add(u)
            await s.commit()

        await callback.message.edit_text(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É –≥—Ä—É–ø–ø—É –í–ö:",
            reply_markup=None,
        )
        await state.set_state(Form.waiting_vk)
    else:
        await callback.answer(
            "‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True,
        )


# ---------- 4. –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ VK ----------
@router.message(Form.waiting_vk)
async def receive_vk(message: Message, state: FSMContext):
    await state.update_data(vk_url=message.text)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –ø–∞–±–ª–∏–∫–∞ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª):"
    )
    await state.set_state(Form.waiting_theme)

# --- –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ receive_vk ---
@router.message(Form.waiting_theme)
async def receive_theme(message: Message, state: FSMContext):
    await state.update_data(theme=message.text)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–µ–ª–æ–≤–æ–π", callback_data="style_–¥–µ–ª–æ–≤–æ–π")],
            [InlineKeyboardButton(text="–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π", callback_data="style_—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π")],
            [InlineKeyboardButton(text="–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", callback_data="style_–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π")],
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ—Å—Ç–æ–≤:", reply_markup=kb)
    await state.set_state(Form.waiting_style)


@router.callback_query(F.data.startswith("style_"))
async def receive_style(callback: CallbackQuery, state: FSMContext):
    style = callback.data.split("_", 1)[1]
    await state.update_data(style=style)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 –ø–æ—Å—Ç/–¥–µ–Ω—å", callback_data="freq_1")],
            [InlineKeyboardButton(text="2 –ø–æ—Å—Ç–∞/–¥–µ–Ω—å", callback_data="freq_2")],
            [InlineKeyboardButton(text="3 –ø–æ—Å—Ç–∞/–¥–µ–Ω—å", callback_data="freq_3")],
        ]
    )
    await callback.message.edit_text("–°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å?", reply_markup=kb)
    await state.set_state(Form.waiting_freq)


@router.callback_query(F.data.startswith("freq_"))
async def receive_freq(callback: CallbackQuery, state: FSMContext):
    freq = float(callback.data.split("_", 1)[1])
    data = await state.get_data()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as s:
        u = await s.get(User, callback.from_user.id)
        u.theme = data["theme"]
        u.style = style = data["style"]
        u.posts_per_day = freq
        await s.commit()

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º 30 –¥–Ω–µ–π –ø–æ—Å—Ç–æ–≤
    await generate_all_posts(u.id, u.theme, u.style, freq)

    await callback.message.edit_text(
        "‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –ü–æ—Å—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )

    