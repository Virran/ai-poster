from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import uuid
import os

from bot.states import Form
from db import async_session
from models import User
from yookassa import Payment
from yookassa.configuration import Configuration

Configuration.account_id = int(os.getenv("YOOKASSA_SHOP_ID"))
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")

router = Router()

# ---------- /start ----------
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–∞–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä.\n\n"
        "–Ø –±—É–¥—É:\n"
        "‚Ä¢ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É –í–ö,\n"
        "‚Ä¢ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã,\n"
        "‚Ä¢ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üëá"
    )
    payment_id, url = create_payment(990, "–ü–æ–¥–ø–∏—Å–∫–∞ AI-–ø–æ—Å—Ç–µ—Ä", message.from_user.id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 990 ‚ÇΩ", url=url)],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{payment_id}")]
    ])
    await message.answer(text, reply_markup=kb)

# ---------- –ö—É–ø–∏—Ç—å ----------
def create_payment(amount: int, description: str, tg_id: int):
    payment = Payment.create({
        "amount": {"value": f"{amount}.00", "currency": "RUB"},
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/YOUR_BOT"
        },
        "capture": True,
        "description": description,
        "metadata": {"tg_id": str(tg_id)}
    })
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–µ–Ω–Ω–æ id –∏ url
    return payment.id, payment.confirmation.confirmation_url

# ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ ----------
@router.callback_query(F.data.startswith("check_"))
async def check_payment(callback: CallbackQuery, state: FSMContext):
    payment_id = callback.data.split("_", 1)[1]
    payment = Payment.find_one(payment_id)

    if payment.status == "succeeded":
        async with async_session() as s:
            u = User(
                tg_id=callback.from_user.id,
                expires_at=datetime.utcnow() + timedelta(days=30),
                is_active=True,
            )
            s.add(u)
            await s.commit()

        await callback.message.edit_text(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É –≥—Ä—É–ø–ø—É –í–ö:"
        )
        await state.set_state(Form.waiting_vk)
    else:
        await callback.answer(
            "‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True,
        )